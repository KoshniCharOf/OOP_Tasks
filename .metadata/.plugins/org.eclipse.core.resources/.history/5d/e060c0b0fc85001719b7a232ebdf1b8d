
package driver;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Random;

import demoGas.GasStation;
import vehicles.Vehicle;
import vignettes.Vignette;
import vignettes.Vignette.Period;

/**
 * Шофьорът има следните характеристики: Име, Списък с превозни средства, за
 * които отговаря, Пари, Бензиностанция, от която пазарува.
 *
 */
public class Driver {

	private String name;
	private ArrayList<Vehicle> vehicles;
	private int money;
	private GasStation gasStation;

	public Driver(String name, int money, GasStation gasStation) {
		if(name!=null && name!=""){
			this.name = name;
		}else{
			this.name = "Unnamed";
		}
		if(money>=0){
			this.money = money;
		}else{
			this.money = money*-1;
		}
		
		this.gasStation = gasStation;
		this.vehicles = new ArrayList<>();
	}



	// Шофьорите могат да си купуват винетки за всички превозни средства, които
	// управляват.
	

	public void buyForAll() {
		for (int i = 0; i < this.vehicles.size(); i++) {
			buyVinette(i, randomPeriod());
		}
	}

/*	 Освен това могат да купуват и винетка само за определено превозно
	 средство по номер (примерно първото) и за определен срок.
	 Когато шофьор купува винетка, той се обръща към бензиностанцията, в която
	 пазарува и изпълнява съответната операция.*/
	
	public void buyVinette(int num, Period p) {
		if(num < 0 || num > this.vehicles.size()){
			System.out.println("No such vehicle");
			return;
		}
		Vehicle v = this.vehicles.get(num);
		if(this.money < tellMeThePriceFor(v, p)){
			System.out.println(this.name+": It is very expensive");
			return;
		}
		Vignette vin = this.gasStation.sellVinette(v, p);
		// Това намалява парите му и освен това той задава новата винетка на
		// съответното превозно средство, за което я е купил.
			this.money -= vin.getPrice();
			v.setVignette(vin);
			
		
	}
	public Period randomPeriod() {
		Period p = null;
		switch (new Random().nextInt(3)) {
		case 0:
			p = Period.DAY;
			break;
		case 1:
			p = Period.MONTH;
			break;
		case 2:
			p = Period.YEAR;
			break;
		default:
			break;
		}
		return p;
	}

	private int getNumberVinettes() {
		int count = 0;
		for (Vehicle v : this.vehicles) {
			if (v.getVignette() != null) {
				++count;
			}
		}
		return count;
	}

	private int tellMeThePriceFor(Vehicle veh, Period p){
		
		
		return this.gasStation.tellThePrice(veh, p);
	}
	public void addVehile(Vehicle v) {
		this.vehicles.add(v);
	}
	
	public ArrayList<Vehicle> getVehicles() {
		return vehicles;
	}

	public String getName() {
		return name;
	}
	
	@Override
	public String toString() {
		return this.name+" vehicles count " + this.vehicles.size() + " vinettes:" + getNumberVinettes() + "  money:"
				+ money;
	}
	// TODO DATE
	// Последната операция, която извършват шофьорите, е по даден ден, месец и
	// година – текуща дата, да върнат списък с всички свои превозни средства с
	// изтекли винетки.
	
	//ПОДАВАМ ЛИСТ С ПРЕВ. СРЕДСТВА, ЗА ДА МОГА ДА ПРЕИЗПОЛЗВАМ МЕТОДА В ДЕМОТО 2 ПЪТИ
	public ArrayList<Vehicle> getExpiredVinettes(ArrayList<Vehicle> vehi, LocalDate date){
		ArrayList<Vehicle> v = new ArrayList<>();
		for (Vehicle vehicle : vehi) {
			if(vehicle.getVignette()!=null){
				Vignette vin = vehicle.getVignette();
				//ама тоя суич нещо ме дразни 
				//и защо така работи
					//ако датата на издаване плюс периода е преди датата на питане, значи не е изтекла
					//винетката и първо писах isAfter, ама така пък работи, поне да не работеше нацяло
				switch (vin.getPeriod()) {
				case DAY:    
					if(vin.getIssueDate().plusDays(1).isBefore(date)){
						v.add(vehicle);
					}
					break;
				case MONTH:
					if(vin.getIssueDate().plusMonths(1).isBefore(date)){
						v.add(vehicle);
					}
					break;
				case YEAR:
					if(vin.getIssueDate().plusYears(1).isBefore(date)){
						v.add(vehicle);
					}
					break;
				default:
					break;
				}
			}
		}
		return v;
	}
}
